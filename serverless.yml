service: appsync-graphql-nodejs-serverless


plugins:
  - serverless-dynamodb-local
  - serverless-appsync-plugin
  - serverless-appsync-offline
  - serverless-offline
  - serverless-prune-plugin


provider:
  name: aws
  region: us-east-1
  runtime: nodejs10.x
  stage: ${opt:stage, 'local'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - lambda:*
        - s3:*
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:*
        - arn:aws:lambda:${self:provider.region}:*:*
  environment:
    REGION: "${self:provider.region}"
    STAGE: "${self:provider.stage}"
    APPSYNC_NAME: "${self:custom.defaultPrefix}-appsync"
    BOOK_TABLE_NAME: "${self:custom.defaultPrefix}-book"
    PRUNE_VERSIONS_TO_KEEP: 3

custom:
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: false
      dbPath: "dynamodb_local_data"
      migrate: false
  appSync: # appsync plugin configuration
    name: "${self:provider.environment.APPSYNC_NAME}"
    authenticationType: API_KEY
    serviceRole: "AppSyncServiceRole"
    dataSources: ${file(resources/data-sources.yml)}
    mappingTemplates: ${file(resources/resolvers.yml)}
  appsync-offline: # appsync-offline configuration
    port: 62222
    dynamodb:
      client:
        endpoint: "http://localhost:8000"
        region: localhost
  defaultPrefix: ${self:service}-${self:provider.stage}
  prune:
    automatic: true
    includeLayers: true
    number: ${self:provider.environment.PRUNE_VERSIONS_TO_KEEP}


layers:
  vendor:
    path: lambda-functions/layers/vendor
    description: Third party libraries.
    compatibleRuntimes:
      - "${self:provider.runtime}"
    allowedAccounts:
      - '*'


functions:
  - ${file(resources/lambda-functions.yml)}


resources:
  # Roles
  - ${file(resources/roles.yml)}
  # DynamoDB tables
  - ${file(resources/dynamodb-tables.yml)}